{"version":3,"file":"eta.es.dev.js","sources":["../../src/err.ts","../../src/polyfills.ts","../../src/utils.ts","../../src/parse.ts","../../src/compile-string.ts","../../src/storage.ts","../../src/containers.ts","../../src/config.ts","../../src/compile.ts","../../src/render.ts"],"sourcesContent":["function setPrototypeOf(obj: any, proto: any) {\n  // eslint-disable-line @typescript-eslint/no-explicit-any\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(obj, proto)\n  } else {\n    obj.__proto__ = proto\n  }\n}\n\n// This is pretty much the only way to get nice, extended Errors\n// without using ES6\n\n/**\n * This returns a new Error with a custom prototype. Note that it's _not_ a constructor\n *\n * @param message Error message\n *\n * **Example**\n *\n * ```js\n * throw EtaErr(\"template not found\")\n * ```\n */\n\nexport default function EtaErr(message: string): Error {\n  const err = new Error(message)\n  setPrototypeOf(err, EtaErr.prototype)\n  return err as Error\n}\n\nEtaErr.prototype = Object.create(Error.prototype, {\n  name: { value: 'Eta Error', enumerable: false }\n})\n\n/**\n * Throws an EtaErr with a nicely formatted error and message showing where in the template the error occurred.\n */\n\nexport function ParseErr(message: string, str: string, indx: number): void {\n  const whitespace = str.slice(0, indx).split(/\\n/)\n\n  const lineNo = whitespace.length\n  const colNo = whitespace[lineNo - 1].length + 1\n  message +=\n    ' at line ' +\n    lineNo +\n    ' col ' +\n    colNo +\n    ':\\n\\n' +\n    '  ' +\n    str.split(/\\n/)[lineNo - 1] +\n    '\\n' +\n    '  ' +\n    Array(colNo).join(' ') +\n    '^'\n  throw EtaErr(message)\n}\n","import EtaErr from './err'\n\n/**\n * @returns The global Promise function\n */\n\nexport const promiseImpl: PromiseConstructor = new Function('return this')().Promise\n\n/**\n * @returns A new AsyncFunction constuctor\n */\n\nexport function getAsyncFunctionConstructor(): Function {\n  try {\n    return new Function('return (async function(){}).constructor')()\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      throw EtaErr(\"This environment doesn't support async/await\")\n    } else {\n      throw e\n    }\n  }\n}\n\n/**\n * str.trimLeft polyfill\n *\n * @param str - Input string\n * @returns The string with left whitespace removed\n *\n */\n\nexport function trimLeft(str: string): string {\n  // eslint-disable-next-line no-extra-boolean-cast\n  if (!!String.prototype.trimLeft) {\n    return str.trimLeft()\n  } else {\n    return str.replace(/^\\s+/, '')\n  }\n}\n\n/**\n * str.trimRight polyfill\n *\n * @param str - Input string\n * @returns The string with right whitespace removed\n *\n */\n\nexport function trimRight(str: string): string {\n  // eslint-disable-next-line no-extra-boolean-cast\n  if (!!String.prototype.trimRight) {\n    return str.trimRight()\n  } else {\n    return str.replace(/\\s+$/, '') // TODO: do we really need to replace BOM's?\n  }\n}\n","// TODO: allow '-' to trim up until newline. Use [^\\S\\n\\r] instead of \\s\n// TODO: only include trimLeft polyfill if not in ES6\n\nimport { trimLeft, trimRight } from './polyfills'\n\n/* TYPES */\n\nimport type { EtaConfig } from './config'\n\ninterface EscapeMap {\n  '&': '&amp;'\n  '<': '&lt;'\n  '>': '&gt;'\n  '\"': '&quot;'\n  \"'\": '&#39;'\n  [index: string]: string\n}\n\n/* END TYPES */\n\nexport function hasOwnProp(obj: object, prop: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, prop)\n}\n\nexport function copyProps<T>(toObj: T, fromObj: T): T {\n  for (const key in fromObj) {\n    if (hasOwnProp((fromObj as unknown) as object, key)) {\n      toObj[key] = fromObj[key]\n    }\n  }\n  return toObj\n}\n\n/**\n * Takes a string within a template and trims it, based on the preceding tag's whitespace control and `config.autoTrim`\n */\n\nfunction trimWS(\n  str: string,\n  config: EtaConfig,\n  wsLeft: string | false,\n  wsRight?: string | false\n): string {\n  let leftTrim\n  let rightTrim\n\n  if (Array.isArray(config.autoTrim)) {\n    // kinda confusing\n    // but _}} will trim the left side of the following string\n    leftTrim = config.autoTrim[1]\n    rightTrim = config.autoTrim[0]\n  } else {\n    leftTrim = rightTrim = config.autoTrim\n  }\n\n  if (wsLeft || wsLeft === false) {\n    leftTrim = wsLeft\n  }\n\n  if (wsRight || wsRight === false) {\n    rightTrim = wsRight\n  }\n\n  if (!rightTrim && !leftTrim) {\n    return str\n  }\n\n  if (leftTrim === 'slurp' && rightTrim === 'slurp') {\n    return str.trim()\n  }\n\n  if (leftTrim === '_' || leftTrim === 'slurp') {\n    // console.log('trimming left' + leftTrim)\n    // full slurp\n\n    str = trimLeft(str)\n  } else if (leftTrim === '-' || leftTrim === 'nl') {\n    // nl trim\n    str = str.replace(/^(?:\\r\\n|\\n|\\r)/, '')\n  }\n\n  if (rightTrim === '_' || rightTrim === 'slurp') {\n    // full slurp\n    str = trimRight(str)\n  } else if (rightTrim === '-' || rightTrim === 'nl') {\n    // nl trim\n    str = str.replace(/(?:\\r\\n|\\n|\\r)$/, '') // TODO: make sure this gets \\r\\n\n  }\n\n  return str\n}\n\n/**\n * A map of special HTML characters to their XML-escaped equivalents\n */\n\nconst escMap: EscapeMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n}\n\nfunction replaceChar(s: string): string {\n  return escMap[s]\n}\n\n/**\n * XML-escapes an input value after converting it to a string\n *\n * @param str - Input value (usually a string)\n * @returns XML-escaped string\n */\n\nfunction XMLEscape(str: any): string {\n  // eslint-disable-line @typescript-eslint/no-explicit-any\n  // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.\n  const newStr = String(str)\n  if (/[&<>\"']/.test(newStr)) {\n    return newStr.replace(/[&<>\"']/g, replaceChar)\n  } else {\n    return newStr\n  }\n}\n\nexport { trimWS, XMLEscape }\n","import { ParseErr } from './err'\nimport { trimWS } from './utils'\n\n/* TYPES */\n\nimport type { EtaConfig } from './config'\n\nexport type TagType = 'r' | 'e' | 'i' | ''\n\nexport interface TemplateObject {\n  t: TagType\n  val: string\n}\n\nexport type AstObject = string | TemplateObject\n\n/* END TYPES */\n\nconst templateLitReg = /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})*}|(?!\\${)[^\\\\`])*`/g\n\nconst singleQuoteReg = /'(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r'\\\\])*?'/g\n\nconst doubleQuoteReg = /\"(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r\"\\\\])*?\"/g\n\n/** Escape special regular expression characters inside a string */\n\nfunction escapeRegExp(string: string) {\n  // From MDN\n  return string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport default function parse(str: string, config: EtaConfig): Array<AstObject> {\n  let buffer: Array<AstObject> = []\n  let trimLeftOfNextStr: string | false = false\n  let lastIndex = 0\n  const parseOptions = config.parse\n\n  if (config.plugins) {\n    for (let i = 0; i < config.plugins.length; i++) {\n      const plugin = config.plugins[i]\n      if (plugin.processTemplate) {\n        str = plugin.processTemplate(str, config)\n      }\n    }\n  }\n\n  /* Adding for EJS compatibility */\n  if (config.rmWhitespace) {\n    // Code taken directly from EJS\n    // Have to use two separate replaces here as `^` and `$` operators don't\n    // work well with `\\r` and empty lines don't work well with the `m` flag.\n    // Essentially, this replaces the whitespace at the beginning and end of\n    // each line and removes multiple newlines.\n    str = str.replace(/[\\r\\n]+/g, '\\n').replace(/^\\s+|\\s+$/gm, '')\n  }\n  /* End rmWhitespace option */\n\n  templateLitReg.lastIndex = 0\n  singleQuoteReg.lastIndex = 0\n  doubleQuoteReg.lastIndex = 0\n\n  function pushString(strng: string, shouldTrimRightOfString?: string | false) {\n    if (strng) {\n      // if string is truthy it must be of type 'string'\n\n      strng = trimWS(\n        strng,\n        config,\n        trimLeftOfNextStr, // this will only be false on the first str, the next ones will be null or undefined\n        shouldTrimRightOfString\n      )\n\n      if (strng) {\n        // replace \\ with \\\\, ' with \\'\n        // we're going to convert all CRLF to LF so it doesn't take more than one replace\n\n        strng = strng.replace(/\\\\|'/g, '\\\\$&').replace(/\\r\\n|\\n|\\r/g, '\\\\n')\n\n        buffer.push(strng)\n      }\n    }\n  }\n\n  const prefixes = [parseOptions.exec, parseOptions.interpolate, parseOptions.raw].reduce(function (\n    accumulator,\n    prefix\n  ) {\n    if (accumulator && prefix) {\n      return accumulator + '|' + escapeRegExp(prefix)\n    } else if (prefix) {\n      // accumulator is falsy\n      return escapeRegExp(prefix)\n    } else {\n      // prefix and accumulator are both falsy\n      return accumulator\n    }\n  },\n  '')\n\n  const parseOpenReg = new RegExp(\n    '([^]*?)' + escapeRegExp(config.tags[0]) + '(-|_)?\\\\s*(' + prefixes + ')?\\\\s*',\n    'g'\n  )\n\n  const parseCloseReg = new RegExp(\n    '\\'|\"|`|\\\\/\\\\*|(\\\\s*(-|_)?' + escapeRegExp(config.tags[1]) + ')',\n    'g'\n  )\n  // TODO: benchmark having the \\s* on either side vs using str.trim()\n\n  let m\n\n  while ((m = parseOpenReg.exec(str))) {\n    lastIndex = m[0].length + m.index\n\n    const precedingString = m[1]\n    const wsLeft = m[2]\n    const prefix = m[3] || '' // by default either ~, =, or empty\n\n    pushString(precedingString, wsLeft)\n\n    parseCloseReg.lastIndex = lastIndex\n    let closeTag\n    let currentObj: AstObject | false = false\n\n    while ((closeTag = parseCloseReg.exec(str))) {\n      if (closeTag[1]) {\n        let content = str.slice(lastIndex, closeTag.index)\n\n        parseOpenReg.lastIndex = lastIndex = parseCloseReg.lastIndex\n\n        trimLeftOfNextStr = closeTag[2]\n\n        const currentType: TagType =\n          prefix === parseOptions.exec\n            ? 'e'\n            : prefix === parseOptions.raw\n            ? 'r'\n            : prefix === parseOptions.interpolate\n            ? 'i'\n            : ''\n\n        currentObj = { t: currentType, val: content }\n        break\n      } else {\n        const char = closeTag[0]\n        if (char === '/*') {\n          const commentCloseInd = str.indexOf('*/', parseCloseReg.lastIndex)\n\n          if (commentCloseInd === -1) {\n            ParseErr('unclosed comment', str, closeTag.index)\n          }\n          parseCloseReg.lastIndex = commentCloseInd\n        } else if (char === \"'\") {\n          singleQuoteReg.lastIndex = closeTag.index\n\n          const singleQuoteMatch = singleQuoteReg.exec(str)\n          if (singleQuoteMatch) {\n            parseCloseReg.lastIndex = singleQuoteReg.lastIndex\n          } else {\n            ParseErr('unclosed string', str, closeTag.index)\n          }\n        } else if (char === '\"') {\n          doubleQuoteReg.lastIndex = closeTag.index\n          const doubleQuoteMatch = doubleQuoteReg.exec(str)\n\n          if (doubleQuoteMatch) {\n            parseCloseReg.lastIndex = doubleQuoteReg.lastIndex\n          } else {\n            ParseErr('unclosed string', str, closeTag.index)\n          }\n        } else if (char === '`') {\n          templateLitReg.lastIndex = closeTag.index\n          const templateLitMatch = templateLitReg.exec(str)\n          if (templateLitMatch) {\n            parseCloseReg.lastIndex = templateLitReg.lastIndex\n          } else {\n            ParseErr('unclosed string', str, closeTag.index)\n          }\n        }\n      }\n    }\n    if (currentObj) {\n      buffer.push(currentObj)\n    } else {\n      ParseErr('unclosed tag', str, m.index + precedingString.length)\n    }\n  }\n\n  pushString(str.slice(lastIndex, str.length), false)\n\n  if (config.plugins) {\n    for (let i = 0; i < config.plugins.length; i++) {\n      const plugin = config.plugins[i]\n      if (plugin.processAST) {\n        buffer = plugin.processAST(buffer, config)\n      }\n    }\n  }\n\n  return buffer\n}\n","import Parse from './parse'\n\n/* TYPES */\n\nimport type { EtaConfig } from './config'\nimport type { AstObject } from './parse'\n\n/* END TYPES */\n\n/**\n * Compiles a template string to a function string. Most often users just use `compile()`, which calls `compileToString` and creates a new function using the result\n *\n * **Example**\n *\n * ```js\n * compileToString(\"Hi <%= it.user %>\", eta.config)\n * // \"var tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR\"\n * ```\n */\n\nexport default function compileToString(str: string, config: EtaConfig): string {\n  const buffer: Array<AstObject> = Parse(str, config)\n\n  let res =\n    \"var tR='',__l,__lP\" +\n    (config.include ? ',include=E.include.bind(E)' : '') +\n    (config.includeFile ? ',includeFile=E.includeFile.bind(E)' : '') +\n    '\\nfunction layout(p,d){__l=p;__lP=d}\\n' +\n    (config.useWith ? 'with(' + config.varName + '||{}){' : '') +\n    compileScope(buffer, config) +\n    (config.includeFile\n      ? 'if(__l)tR=' +\n        (config.async ? 'await ' : '') +\n        `includeFile(__l,Object.assign(${config.varName},{body:tR},__lP))\\n`\n      : config.include\n      ? 'if(__l)tR=' +\n        (config.async ? 'await ' : '') +\n        `include(__l,Object.assign(${config.varName},{body:tR},__lP))\\n`\n      : '') +\n    'if(cb){cb(null,tR)} return tR' +\n    (config.useWith ? '}' : '')\n\n  if (config.plugins) {\n    for (let i = 0; i < config.plugins.length; i++) {\n      const plugin = config.plugins[i]\n      if (plugin.processFnString) {\n        res = plugin.processFnString(res, config)\n      }\n    }\n  }\n\n  return res\n}\n\n/**\n * Loops through the AST generated by `parse` and transform each item into JS calls\n *\n * **Example**\n *\n * ```js\n * // AST version of 'Hi <%= it.user %>'\n * let templateAST = ['Hi ', { val: 'it.user', t: 'i' }]\n * compileScope(templateAST, eta.config)\n * // \"tR+='Hi ';tR+=E.e(it.user);\"\n * ```\n */\n\nfunction compileScope(buff: Array<AstObject>, config: EtaConfig) {\n  let i = 0\n  const buffLength = buff.length\n  let returnStr = ''\n\n  for (i; i < buffLength; i++) {\n    const currentBlock = buff[i]\n    if (typeof currentBlock === 'string') {\n      const str = currentBlock\n\n      // we know string exists\n      returnStr += \"tR+='\" + str + \"'\\n\"\n    } else {\n      const type = currentBlock.t // ~, s, !, ?, r\n      let content = currentBlock.val || ''\n\n      if (type === 'r') {\n        // raw\n\n        if (config.filter) {\n          content = 'E.filter(' + content + ')'\n        }\n\n        returnStr += 'tR+=' + content + '\\n'\n      } else if (type === 'i') {\n        // interpolate\n\n        if (config.filter) {\n          content = 'E.filter(' + content + ')'\n        }\n\n        if (config.autoEscape) {\n          content = 'E.e(' + content + ')'\n        }\n        returnStr += 'tR+=' + content + '\\n'\n        // reference\n      } else if (type === 'e') {\n        // execute\n        returnStr += content + '\\n' // you need a \\n in case you have <% } %>\n      }\n    }\n  }\n\n  return returnStr\n}\n","import { copyProps } from './utils'\n\n/**\n * Handles storage and accessing of values\n *\n * In this case, we use it to store compiled template functions\n * Indexed by their `name` or `filename`\n */\nclass Cacher<T> {\n  constructor(private cache: Record<string, T>) {}\n  define(key: string, val: T): void {\n    this.cache[key] = val\n  }\n  get(key: string): T {\n    // string | array.\n    // TODO: allow array of keys to look down\n    // TODO: create plugin to allow referencing helpers, filters with dot notation\n    return this.cache[key]\n  }\n  remove(key: string): void {\n    delete this.cache[key]\n  }\n  reset(): void {\n    this.cache = {}\n  }\n  load(cacheObj: Record<string, T>): void {\n    copyProps(this.cache, cacheObj)\n  }\n}\n\nexport { Cacher }\n","import { Cacher } from './storage'\n\n/* TYPES */\n\nimport type { TemplateFunction } from './compile'\n\n/* END TYPES */\n\n/**\n * Eta's template storage\n *\n * Stores partials and cached templates\n */\n\nconst templates = new Cacher<TemplateFunction>({})\n\nexport { templates }\n","import { templates } from './containers'\nimport { copyProps, XMLEscape } from './utils'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport type { TemplateFunction } from './compile'\nimport type { Cacher } from './storage'\n\ntype trimConfig = 'nl' | 'slurp' | false\n\nexport interface EtaConfig {\n  /** Whether or not to automatically XML-escape interpolations. Default true */\n  autoEscape: boolean\n\n  /** Configure automatic whitespace trimming. Default `[false, 'nl']` */\n  autoTrim: trimConfig | [trimConfig, trimConfig]\n\n  /** Compile to async function */\n  async: boolean\n\n  /** Whether or not to cache templates if `name` or `filename` is passed */\n  cache: boolean\n\n  /** XML-escaping function */\n  e: (str: string) => string\n\n  /** Parsing options */\n  parse: {\n    /** Which prefix to use for evaluation. Default `\"\"` */\n    exec: string\n\n    /** Which prefix to use for interpolation. Default `\"=\"` */\n    interpolate: string\n\n    /** Which prefix to use for raw interpolation. Default `\"~\"` */\n    raw: string\n  }\n\n  /** Array of plugins */\n  plugins: Array<{ processFnString?: Function; processAST?: Function; processTemplate?: Function }>\n\n  /** Remove all safe-to-remove whitespace */\n  rmWhitespace: boolean\n\n  /** Delimiters: by default `['<%', '%>']` */\n  tags: [string, string]\n\n  /** Holds template cache */\n  templates: Cacher<TemplateFunction>\n\n  /** Name of the data object. Default `it` */\n  varName: string\n\n  /** Absolute path to template file */\n  filename?: string\n\n  /** Holds cache of resolved filepaths. Set to `false` to disable */\n  filepathCache?: Record<string, string> | false\n\n  /** A filter function applied to every interpolation or raw interpolation */\n  filter?: Function\n\n  /** Function to include templates by name */\n  include?: Function\n\n  /** Function to include templates by filepath */\n  includeFile?: Function\n\n  /** Name of template */\n  name?: string\n\n  /** Where should absolute paths begin? Default '/' */\n  root?: string\n\n  /** Make data available on the global object instead of varName */\n  useWith?: boolean\n\n  /** Whether or not to cache templates if `name` or `filename` is passed: duplicate of `cache` */\n  'view cache'?: boolean\n\n  /** Directory or directories that contain templates */\n  views?: string | Array<string>\n\n  [index: string]: any // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\nexport interface EtaConfigWithFilename extends EtaConfig {\n  filename: string\n}\n\nexport type PartialConfig = Partial<EtaConfig>\nexport type PartialAsyncConfig = PartialConfig & { async: true }\n\n/* END TYPES */\n\n/**\n * Include a template based on its name (or filepath, if it's already been cached).\n *\n * Called like `include(templateNameOrPath, data)`\n */\n\nfunction includeHelper(this: EtaConfig, templateNameOrPath: string, data: object): string {\n  const template = this.templates.get(templateNameOrPath)\n  if (!template) {\n    throw EtaErr('Could not fetch template \"' + templateNameOrPath + '\"')\n  }\n  return template(data, this)\n}\n\n/** Eta's base (global) configuration */\nconst config: EtaConfig = {\n  async: false,\n  autoEscape: true,\n  autoTrim: [false, 'nl'],\n  cache: false,\n  e: XMLEscape,\n  include: includeHelper,\n  parse: {\n    exec: '',\n    interpolate: '=',\n    raw: '~'\n  },\n  plugins: [],\n  rmWhitespace: false,\n  tags: ['<%', '%>'],\n  templates: templates,\n  useWith: false,\n  varName: 'it'\n}\n\n/**\n * Takes one or two partial (not necessarily complete) configuration objects, merges them 1 layer deep into eta.config, and returns the result\n *\n * @param override Partial configuration object\n * @param baseConfig Partial configuration object to merge before `override`\n *\n * **Example**\n *\n * ```js\n * let customConfig = getConfig({tags: ['!#', '#!']})\n * ```\n */\n\nfunction getConfig(override: PartialConfig, baseConfig?: EtaConfig): EtaConfig {\n  // TODO: run more tests on this\n\n  const res: PartialConfig = {} // Linked\n  copyProps(res, config) // Creates deep clone of eta.config, 1 layer deep\n\n  if (baseConfig) {\n    copyProps(res, baseConfig)\n  }\n\n  if (override) {\n    copyProps(res, override)\n  }\n\n  return res as EtaConfig\n}\n\n/** Update Eta's base config */\n\nfunction configure(options: PartialConfig): Partial<EtaConfig> {\n  return copyProps(config, options)\n}\n\nexport { config, getConfig, configure }\n","import compileToString from './compile-string'\nimport { getConfig } from './config'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport type { EtaConfig, PartialConfig } from './config'\nimport type { CallbackFn } from './file-handlers'\nimport { getAsyncFunctionConstructor } from './polyfills'\nexport type TemplateFunction = (data: object, config: EtaConfig, cb?: CallbackFn) => string\n\n/* END TYPES */\n\n/**\n * Takes a template string and returns a template function that can be called with (data, config, [cb])\n *\n * @param str - The template string\n * @param config - A custom configuration object (optional)\n *\n * **Example**\n *\n * ```js\n * let compiledFn = eta.compile(\"Hi <%= it.user %>\")\n * // function anonymous()\n * let compiledFnStr = compiledFn.toString()\n * // \"function anonymous(it,E,cb\\n) {\\nvar tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR\\n}\"\n * ```\n */\n\nexport default function compile(str: string, config?: PartialConfig): TemplateFunction {\n  const options: EtaConfig = getConfig(config || {})\n\n  /* ASYNC HANDLING */\n  // The below code is modified from mde/ejs. All credit should go to them.\n  const ctor = options.async ? (getAsyncFunctionConstructor() as FunctionConstructor) : Function\n  /* END ASYNC HANDLING */\n\n  try {\n    return new ctor(\n      options.varName,\n      'E', // EtaConfig\n      'cb', // optional callback\n      compileToString(str, options)\n    ) as TemplateFunction // eslint-disable-line no-new-func\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      throw EtaErr(\n        'Bad template syntax\\n\\n' +\n          e.message +\n          '\\n' +\n          Array(e.message.length + 1).join('=') +\n          '\\n' +\n          compileToString(str, options) +\n          '\\n' // This will put an extra newline before the callstack for extra readability\n      )\n    } else {\n      throw e\n    }\n  }\n}\n","import compile from './compile'\nimport { getConfig } from './config'\nimport { promiseImpl } from './polyfills'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport type { EtaConfig, PartialConfig, PartialAsyncConfig } from './config'\nimport type { TemplateFunction } from './compile'\nimport type { CallbackFn } from './file-handlers'\n\n/* END TYPES */\n\nfunction handleCache(template: string | TemplateFunction, options: EtaConfig): TemplateFunction {\n  if (options.cache && options.name && options.templates.get(options.name)) {\n    return options.templates.get(options.name)\n  }\n\n  const templateFunc = typeof template === 'function' ? template : compile(template, options)\n\n  // Note that we don't have to check if it already exists in the cache;\n  // it would have returned earlier if it had\n  if (options.cache && options.name) {\n    options.templates.define(options.name, templateFunc)\n  }\n\n  return templateFunc\n}\n\n/**\n * Render a template\n *\n * If `template` is a string, Eta will compile it to a function and then call it with the provided data.\n * If `template` is a template function, Eta will call it with the provided data.\n *\n * If `config.async` is `false`, Eta will return the rendered template.\n *\n * If `config.async` is `true` and there's a callback function, Eta will call the callback with `(err, renderedTemplate)`.\n * If `config.async` is `true` and there's not a callback function, Eta will return a Promise that resolves to the rendered template.\n *\n * If `config.cache` is `true` and `config` has a `name` or `filename` property, Eta will cache the template on the first render and use the cached template for all subsequent renders.\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n * @param cb Callback function\n */\nexport default function render(\n  template: string | TemplateFunction,\n  data: object,\n  config: PartialAsyncConfig,\n  cb: CallbackFn\n): void\n\n/**\n * Render a template\n *\n * If `template` is a string, Eta will compile it to a function and then call it with the provided data.\n * If `template` is a template function, Eta will call it with the provided data.\n *\n * If `config.async` is `false`, Eta will return the rendered template.\n *\n * If `config.async` is `true` and there's a callback function, Eta will call the callback with `(err, renderedTemplate)`.\n * If `config.async` is `true` and there's not a callback function, Eta will return a Promise that resolves to the rendered template.\n *\n * If `config.cache` is `true` and `config` has a `name` or `filename` property, Eta will cache the template on the first render and use the cached template for all subsequent renders.\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n */\nexport default function render(\n  template: string | TemplateFunction,\n  data: object,\n  config: PartialAsyncConfig\n): Promise<string>\n\n/**\n * Render a template\n *\n * If `template` is a string, Eta will compile it to a function and then call it with the provided data.\n * If `template` is a template function, Eta will call it with the provided data.\n *\n * If `config.async` is `false`, Eta will return the rendered template.\n *\n * If `config.async` is `true` and there's a callback function, Eta will call the callback with `(err, renderedTemplate)`.\n * If `config.async` is `true` and there's not a callback function, Eta will return a Promise that resolves to the rendered template.\n *\n * If `config.cache` is `true` and `config` has a `name` or `filename` property, Eta will cache the template on the first render and use the cached template for all subsequent renders.\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n */\nexport default function render(\n  template: string | TemplateFunction,\n  data: object,\n  config?: PartialConfig\n): string\n\n/**\n * Render a template\n *\n * If `template` is a string, Eta will compile it to a function and then call it with the provided data.\n * If `template` is a template function, Eta will call it with the provided data.\n *\n * If `config.async` is `false`, Eta will return the rendered template.\n *\n * If `config.async` is `true` and there's a callback function, Eta will call the callback with `(err, renderedTemplate)`.\n * If `config.async` is `true` and there's not a callback function, Eta will return a Promise that resolves to the rendered template.\n *\n * If `config.cache` is `true` and `config` has a `name` or `filename` property, Eta will cache the template on the first render and use the cached template for all subsequent renders.\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n * @param cb Callback function\n */\nexport default function render(\n  template: string | TemplateFunction,\n  data: object,\n  config?: PartialConfig,\n  cb?: CallbackFn\n): string | Promise<string> | void\n\nexport default function render(\n  template: string | TemplateFunction,\n  data: object,\n  config?: PartialConfig,\n  cb?: CallbackFn\n): string | Promise<string> | void {\n  const options = getConfig(config || {})\n\n  if (options.async) {\n    if (cb) {\n      // If user passes callback\n      try {\n        // Note: if there is an error while rendering the template,\n        // It will bubble up and be caught here\n        const templateFn = handleCache(template, options)\n        templateFn(data, options, cb)\n      } catch (err) {\n        return cb(err as Error)\n      }\n    } else {\n      // No callback, try returning a promise\n      if (typeof promiseImpl === 'function') {\n        return new promiseImpl(function (resolve: Function, reject: Function) {\n          try {\n            resolve(handleCache(template, options)(data, options))\n          } catch (err) {\n            reject(err)\n          }\n        })\n      } else {\n        throw EtaErr(\"Please provide a callback function, this env doesn't support Promises\")\n      }\n    }\n  } else {\n    return handleCache(template, options)(data, options)\n  }\n}\n\n/**\n * Render a template asynchronously\n *\n * If `template` is a string, Eta will compile it to a function and call it with the provided data.\n * If `template` is a function, Eta will call it with the provided data.\n *\n * If there is a callback function, Eta will call it with `(err, renderedTemplate)`.\n * If there is not a callback function, Eta will return a Promise that resolves to the rendered template\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n */\nexport function renderAsync(\n  template: string | TemplateFunction,\n  data: object,\n  config?: PartialConfig\n): Promise<string>\n\n/**\n * Render a template asynchronously\n *\n * If `template` is a string, Eta will compile it to a function and call it with the provided data.\n * If `template` is a function, Eta will call it with the provided data.\n *\n * If there is a callback function, Eta will call it with `(err, renderedTemplate)`.\n * If there is not a callback function, Eta will return a Promise that resolves to the rendered template\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n * @param cb Callback function\n */\nexport function renderAsync(\n  template: string | TemplateFunction,\n  data: object,\n  config: PartialConfig,\n  cb: CallbackFn\n): void\n\n/**\n * Render a template asynchronously\n *\n * If `template` is a string, Eta will compile it to a function and call it with the provided data.\n * If `template` is a function, Eta will call it with the provided data.\n *\n * If there is a callback function, Eta will call it with `(err, renderedTemplate)`.\n * If there is not a callback function, Eta will return a Promise that resolves to the rendered template\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n * @param cb Callback function\n */\nexport function renderAsync(\n  template: string | TemplateFunction,\n  data: object,\n  config?: PartialConfig,\n  cb?: CallbackFn\n): string | Promise<string> | void\n\nexport function renderAsync(\n  template: string | TemplateFunction,\n  data: object,\n  config?: PartialConfig,\n  cb?: CallbackFn\n): string | Promise<string> | void {\n  // Using Object.assign to lower bundle size, using spread operator makes it larger because of typescript injected polyfills\n  return render(template, data, Object.assign({}, config, { async: true }), cb)\n}\n"],"names":["Parse"],"mappings":"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"}